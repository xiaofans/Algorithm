== 引用是否相等 栈
// 我们检测他们的标识是否相同即引用是否相同

equals 值是否相等 堆
总之,"=="和"!="比较的是地址.也可认为"=="和"!="比较的是对象句柄;
而equals()比较的是对象内容.或者说,,"=="和"!="比较的是"栈"中的内容,而equals()比较的是"堆"中的内容.

equals是一种等价关系 有以下特性
自反性      x.equals(x) true
对称性      y.equals(x) true && x.equals(y) true
传递性      x.equals(y)  true y.equals(z) true x.equals(z) true
一致性      
非空行      x.equals(null) 总是返回false


-----------------
others
异常 Exception
断言 Assertion 验证我们在代码中做到一些假设

--------------------------------------
java 基本数据类型
byte   8bit
short  16bit 
char   16bit
int    32bit  
long   64bit
double 64bit
float  32bit 
boolean 1bit

--------------------------------------
因为String太过常用，JAVA类库的设计者在实现时做了个小小的变化，即采用了享元模式,
每当生成一个新内容的字符串时，他们都被添加到一 个共享池中，
当第二次再次生成同样内容的字符串实例时，就共享此对象，而不是创建一个新对象，
这样的做法仅仅适合于通过=符号进行的初始化

------------------------------------------------
java的封装类型都是原始数据对应的引用类型
自动装箱 自动拆箱
类型参数必须被实例化为引用类型，因此java有一种特殊机制来使泛型代码能够处理原始数据类型。
自动将一个原始数据类型转化为一个封装类型被称为自动装箱 int -> Integer
自动将一个封装类型转为一个原始数据类型被称为自动拆箱 Integer -> int



